/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: service_media.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\api\\annotations";
import * as dependency_2 from "./protoc-gen-openapiv2\\options\\annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace pb {
    export class UploadImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            filename?: string;
            alt?: string;
            product_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("product_id" in data && data.product_id != undefined) {
                    this.product_id = data.product_id;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set alt(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get product_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set product_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            filename?: string;
            alt?: string;
            product_id?: string;
        }): UploadImageRequest {
            const message = new UploadImageRequest({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.filename != null) {
                message.filename = data.filename;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.product_id != null) {
                message.product_id = data.product_id;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                filename?: string;
                alt?: string;
                product_id?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.filename != null) {
                data.filename = this.filename;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.product_id != null) {
                data.product_id = this.product_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.filename.length)
                writer.writeString(2, this.filename);
            if (this.alt.length)
                writer.writeString(3, this.alt);
            if (this.product_id.length)
                writer.writeString(4, this.product_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.filename = reader.readString();
                        break;
                    case 3:
                        message.alt = reader.readString();
                        break;
                    case 4:
                        message.product_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadImageRequest {
            return UploadImageRequest.deserialize(bytes);
        }
    }
    export class UploadImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            url?: string;
        }): UploadImageResponse {
            const message = new UploadImageResponse({});
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadImageResponse {
            return UploadImageResponse.deserialize(bytes);
        }
    }
    export class DeleteImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filename?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filename" in data && data.filename != undefined) {
                    this.filename = data.filename;
                }
            }
        }
        get filename() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set filename(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            filename?: string;
        }): DeleteImageRequest {
            const message = new DeleteImageRequest({});
            if (data.filename != null) {
                message.filename = data.filename;
            }
            return message;
        }
        toObject() {
            const data: {
                filename?: string;
            } = {};
            if (this.filename != null) {
                data.filename = this.filename;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filename.length)
                writer.writeString(1, this.filename);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.filename = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteImageRequest {
            return DeleteImageRequest.deserialize(bytes);
        }
    }
    export class DeleteImageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set success(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: string;
        }): DeleteImageResponse {
            const message = new DeleteImageResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success.length)
                writer.writeString(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteImageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteImageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteImageResponse {
            return DeleteImageResponse.deserialize(bytes);
        }
    }
    export class UploadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chunk?: Uint8Array;
            sequence_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chunk" in data && data.chunk != undefined) {
                    this.chunk = data.chunk;
                }
                if ("sequence_number" in data && data.sequence_number != undefined) {
                    this.sequence_number = data.sequence_number;
                }
            }
        }
        get chunk() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set chunk(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get sequence_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sequence_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chunk?: Uint8Array;
            sequence_number?: number;
        }): UploadRequest {
            const message = new UploadRequest({});
            if (data.chunk != null) {
                message.chunk = data.chunk;
            }
            if (data.sequence_number != null) {
                message.sequence_number = data.sequence_number;
            }
            return message;
        }
        toObject() {
            const data: {
                chunk?: Uint8Array;
                sequence_number?: number;
            } = {};
            if (this.chunk != null) {
                data.chunk = this.chunk;
            }
            if (this.sequence_number != null) {
                data.sequence_number = this.sequence_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chunk.length)
                writer.writeBytes(1, this.chunk);
            if (this.sequence_number != 0)
                writer.writeInt32(2, this.sequence_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chunk = reader.readBytes();
                        break;
                    case 2:
                        message.sequence_number = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadRequest {
            return UploadRequest.deserialize(bytes);
        }
    }
    export class UploadResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): UploadResponse {
            const message = new UploadResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UploadResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UploadResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UploadResponse {
            return UploadResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUploadServiceService {
        static definition = {};
        [method: string]: grpc_1.UntypedHandleCall;
    }
    export class UploadServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUploadServiceService.definition, "UploadService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
    }
    export abstract class UnimplementedServiceMediaService {
        static definition = {
            UploadImage: {
                path: "/pb.ServiceMedia/UploadImage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UploadImageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UploadImageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UploadImageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UploadImageResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteImage: {
                path: "/pb.ServiceMedia/DeleteImage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteImageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteImageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteImageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteImageResponse.deserialize(new Uint8Array(bytes))
            },
            UploadLargeFile: {
                path: "/pb.ServiceMedia/UploadLargeFile",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: UploadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UploadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UploadResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UploadResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UploadImage(call: grpc_1.ServerUnaryCall<UploadImageRequest, UploadImageResponse>, callback: grpc_1.sendUnaryData<UploadImageResponse>): void;
        abstract DeleteImage(call: grpc_1.ServerUnaryCall<DeleteImageRequest, DeleteImageResponse>, callback: grpc_1.sendUnaryData<DeleteImageResponse>): void;
        abstract UploadLargeFile(call: grpc_1.ServerReadableStream<UploadRequest, UploadResponse>, callback: grpc_1.sendUnaryData<UploadResponse>): void;
    }
    export class ServiceMediaClient extends grpc_1.makeGenericClientConstructor(UnimplementedServiceMediaService.definition, "ServiceMedia", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        UploadImage: GrpcUnaryServiceInterface<UploadImageRequest, UploadImageResponse> = (message: UploadImageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UploadImageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UploadImageResponse>, callback?: grpc_1.requestCallback<UploadImageResponse>): grpc_1.ClientUnaryCall => {
            return super.UploadImage(message, metadata, options, callback);
        };
        DeleteImage: GrpcUnaryServiceInterface<DeleteImageRequest, DeleteImageResponse> = (message: DeleteImageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteImageResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteImageResponse>, callback?: grpc_1.requestCallback<DeleteImageResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteImage(message, metadata, options, callback);
        };
        UploadLargeFile: GrpWritableServiceInterface<UploadRequest, UploadResponse> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UploadResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UploadResponse>, callback?: grpc_1.requestCallback<UploadResponse>): grpc_1.ClientWritableStream<UploadRequest> => {
            return super.UploadLargeFile(metadata, options, callback);
        };
    }
}
