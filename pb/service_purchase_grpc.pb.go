// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: service_purchase.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServicePurchase_Ping_FullMethodName           = "/pb.ServicePurchase/Ping"
	ServicePurchase_CreatePurchase_FullMethodName = "/pb.ServicePurchase/CreatePurchase"
)

// ServicePurchaseClient is the client API for ServicePurchase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicePurchaseClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CreatePurchase(ctx context.Context, in *CreatePurchaseRequestApi, opts ...grpc.CallOption) (*CreatePurchaseResponseApi, error)
}

type servicePurchaseClient struct {
	cc grpc.ClientConnInterface
}

func NewServicePurchaseClient(cc grpc.ClientConnInterface) ServicePurchaseClient {
	return &servicePurchaseClient{cc}
}

func (c *servicePurchaseClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ServicePurchase_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicePurchaseClient) CreatePurchase(ctx context.Context, in *CreatePurchaseRequestApi, opts ...grpc.CallOption) (*CreatePurchaseResponseApi, error) {
	out := new(CreatePurchaseResponseApi)
	err := c.cc.Invoke(ctx, ServicePurchase_CreatePurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicePurchaseServer is the server API for ServicePurchase service.
// All implementations must embed UnimplementedServicePurchaseServer
// for forward compatibility
type ServicePurchaseServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CreatePurchase(context.Context, *CreatePurchaseRequestApi) (*CreatePurchaseResponseApi, error)
	mustEmbedUnimplementedServicePurchaseServer()
}

// UnimplementedServicePurchaseServer must be embedded to have forward compatible implementations.
type UnimplementedServicePurchaseServer struct {
}

func (UnimplementedServicePurchaseServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServicePurchaseServer) CreatePurchase(context.Context, *CreatePurchaseRequestApi) (*CreatePurchaseResponseApi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchase not implemented")
}
func (UnimplementedServicePurchaseServer) mustEmbedUnimplementedServicePurchaseServer() {}

// UnsafeServicePurchaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicePurchaseServer will
// result in compilation errors.
type UnsafeServicePurchaseServer interface {
	mustEmbedUnimplementedServicePurchaseServer()
}

func RegisterServicePurchaseServer(s grpc.ServiceRegistrar, srv ServicePurchaseServer) {
	s.RegisterService(&ServicePurchase_ServiceDesc, srv)
}

func _ServicePurchase_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicePurchaseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicePurchase_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicePurchaseServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicePurchase_CreatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseRequestApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicePurchaseServer).CreatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicePurchase_CreatePurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicePurchaseServer).CreatePurchase(ctx, req.(*CreatePurchaseRequestApi))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicePurchase_ServiceDesc is the grpc.ServiceDesc for ServicePurchase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicePurchase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServicePurchase",
	HandlerType: (*ServicePurchaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServicePurchase_Ping_Handler,
		},
		{
			MethodName: "CreatePurchase",
			Handler:    _ServicePurchase_CreatePurchase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_purchase.proto",
}
