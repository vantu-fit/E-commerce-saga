// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: service_media.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const ()

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceClient interface {
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility
type UploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadServiceServer struct {
}

func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "service_media.proto",
}

const (
	ServiceMedia_UploadImage_FullMethodName     = "/pb.ServiceMedia/UploadImage"
	ServiceMedia_DeleteImage_FullMethodName     = "/pb.ServiceMedia/DeleteImage"
	ServiceMedia_UploadLargeFile_FullMethodName = "/pb.ServiceMedia/UploadLargeFile"
)

// ServiceMediaClient is the client API for ServiceMedia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceMediaClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error)
	UploadLargeFile(ctx context.Context, opts ...grpc.CallOption) (ServiceMedia_UploadLargeFileClient, error)
}

type serviceMediaClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceMediaClient(cc grpc.ClientConnInterface) ServiceMediaClient {
	return &serviceMediaClient{cc}
}

func (c *serviceMediaClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, ServiceMedia_UploadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMediaClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*DeleteImageResponse, error) {
	out := new(DeleteImageResponse)
	err := c.cc.Invoke(ctx, ServiceMedia_DeleteImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceMediaClient) UploadLargeFile(ctx context.Context, opts ...grpc.CallOption) (ServiceMedia_UploadLargeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceMedia_ServiceDesc.Streams[0], ServiceMedia_UploadLargeFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceMediaUploadLargeFileClient{stream}
	return x, nil
}

type ServiceMedia_UploadLargeFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type serviceMediaUploadLargeFileClient struct {
	grpc.ClientStream
}

func (x *serviceMediaUploadLargeFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceMediaUploadLargeFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceMediaServer is the server API for ServiceMedia service.
// All implementations must embed UnimplementedServiceMediaServer
// for forward compatibility
type ServiceMediaServer interface {
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error)
	UploadLargeFile(ServiceMedia_UploadLargeFileServer) error
	mustEmbedUnimplementedServiceMediaServer()
}

// UnimplementedServiceMediaServer must be embedded to have forward compatible implementations.
type UnimplementedServiceMediaServer struct {
}

func (UnimplementedServiceMediaServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedServiceMediaServer) DeleteImage(context.Context, *DeleteImageRequest) (*DeleteImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedServiceMediaServer) UploadLargeFile(ServiceMedia_UploadLargeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLargeFile not implemented")
}
func (UnimplementedServiceMediaServer) mustEmbedUnimplementedServiceMediaServer() {}

// UnsafeServiceMediaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceMediaServer will
// result in compilation errors.
type UnsafeServiceMediaServer interface {
	mustEmbedUnimplementedServiceMediaServer()
}

func RegisterServiceMediaServer(s grpc.ServiceRegistrar, srv ServiceMediaServer) {
	s.RegisterService(&ServiceMedia_ServiceDesc, srv)
}

func _ServiceMedia_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMediaServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceMedia_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMediaServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMedia_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceMediaServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceMedia_DeleteImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceMediaServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceMedia_UploadLargeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceMediaServer).UploadLargeFile(&serviceMediaUploadLargeFileServer{stream})
}

type ServiceMedia_UploadLargeFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type serviceMediaUploadLargeFileServer struct {
	grpc.ServerStream
}

func (x *serviceMediaUploadLargeFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceMediaUploadLargeFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceMedia_ServiceDesc is the grpc.ServiceDesc for ServiceMedia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceMedia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServiceMedia",
	HandlerType: (*ServiceMediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _ServiceMedia_UploadImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _ServiceMedia_DeleteImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadLargeFile",
			Handler:       _ServiceMedia_UploadLargeFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service_media.proto",
}
