// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  first_name,
  last_name,
  email,
  address,
  phone_number,
  password
) VALUES (
  $1, $2, $3 , $4, $5, $6
) RETURNING id, active, first_name, last_name, email, address, phone_number, password, updated_at, created_at
`

type CreateAccountParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Email       string `json:"email"`
	Address     string `json:"address"`
	PhoneNumber string `json:"phone_number"`
	Password    string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Address,
		arg.PhoneNumber,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address,
		&i.PhoneNumber,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, active, first_name, last_name, email, address, phone_number, password, updated_at, created_at FROM accounts WHERE email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Address,
		&i.PhoneNumber,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
