// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id,
    product_id,
    quantity,
    customer_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, product_id, quantity, customer_id, updated_at, created_at
`

type CreateOrderParams struct {
	ID         uuid.UUID `json:"id"`
	ProductID  uuid.UUID `json:"product_id"`
	Quantity   int32     `json:"quantity"`
	CustomerID uuid.UUID `json:"customer_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.ProductID,
		arg.Quantity,
		arg.CustomerID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.CustomerID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :many
DELETE FROM orders WHERE id = $1 RETURNING id, product_id, quantity, customer_id, updated_at, created_at
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, deleteOrder, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Quantity,
			&i.CustomerID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :many
SELECT id, product_id, quantity, customer_id, updated_at, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrder, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Quantity,
			&i.CustomerID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
