// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: image.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO product_images (
    product_id,
    name,
    alt
) VALUES (
    $1, $2, $3
) RETURNING id, product_id, name, alt, created_at
`

type CreateProductImageParams struct {
	ProductID uuid.UUID `json:"product_id"`
	Name      string    `json:"name"`
	Alt       string    `json:"alt"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRow(ctx, createProductImage, arg.ProductID, arg.Name, arg.Alt)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Alt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductImageByID = `-- name: DeleteProductImageByID :one
DELETE FROM product_images WHERE id = $1 RETURNING id, product_id, name, alt, created_at
`

func (q *Queries) DeleteProductImageByID(ctx context.Context, id uuid.UUID) (ProductImage, error) {
	row := q.db.QueryRow(ctx, deleteProductImageByID, id)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Alt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductImageByProductID = `-- name: DeleteProductImageByProductID :many
DELETE FROM product_images WHERE product_id = $1 RETURNING id, product_id, name, alt, created_at
`

func (q *Queries) DeleteProductImageByProductID(ctx context.Context, productID uuid.UUID) ([]ProductImage, error) {
	rows, err := q.db.Query(ctx, deleteProductImageByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductImage
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Alt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductImageByID = `-- name: GetProductImageByID :one
SELECT id, product_id, name, alt, created_at FROM product_images WHERE id = $1
`

func (q *Queries) GetProductImageByID(ctx context.Context, id uuid.UUID) (ProductImage, error) {
	row := q.db.QueryRow(ctx, getProductImageByID, id)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Alt,
		&i.CreatedAt,
	)
	return i, err
}

const getProductImagesByProductID = `-- name: GetProductImagesByProductID :many
SELECT id, product_id, name, alt, created_at FROM product_images WHERE product_id = $1
`

func (q *Queries) GetProductImagesByProductID(ctx context.Context, productID uuid.UUID) ([]ProductImage, error) {
	rows, err := q.db.Query(ctx, getProductImagesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductImage
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Alt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
