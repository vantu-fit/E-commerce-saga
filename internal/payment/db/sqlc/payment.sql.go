// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (id, customer_id, currency, amount)
VALUES ($1, $2, $3, $4)
RETURNING id, customer_id, amount, currency, created_at, updated_at
`

type CreatePaymentParams struct {
	ID         uuid.UUID `json:"id"`
	CustomerID uuid.UUID `json:"customer_id"`
	Currency   string    `json:"currency"`
	Amount     int64     `json:"amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.CustomerID,
		arg.Currency,
		arg.Amount,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :one
DELETE FROM payments WHERE id = $1
RETURNING id, customer_id, amount, currency, created_at, updated_at
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, deletePayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, customer_id, amount, currency, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPaymentById(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentById, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Amount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
